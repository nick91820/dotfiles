#!/usr/bin/env bash

# ~/.macos — https://mths.be/macos
# Modified by Nick J. Moss

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; 
  do sudo -n true; 
  sleep 60; 
  kill -0 "$$" || exit; 
  done 2>/dev/null &
#################################################################################################################################

###########################################
# Nick's Customizations                   #
###########################################
printf "
###############################################
# WELCOME TO MAC OS CONFIGURATION AND SET UP! #                                                   
###############################################

Hello $(whoami)! Let's get you all set up!

Things To Do Before You Continue:
  1. Sign-in to iCloud and the App Store.
  2. Quit out of all applications that are open.

Press Enter to Continue
"
read
clear

printf "
Would you like to create a main folder for all of your code/projects? (y/n)
"
read input
if [[ ${input} == 'y' ]]
then 
  echo "What would you like that folder to be called?"
  read name
  mkdir -p "${HOME}/${name}"
  echo "${name} was created and placed in your ${HOME} directory\n"
  echo "Press Enter to Continue"
  read
  clear
else
fi
#################################################################################################################################
clear
printf "
#########################################
# OH-MY-ZSH INSTALLATION & CONFIGURATON #
#########################################

Oh-my-zsh is the framework that can configure your terminal shell and it comes
with really cool features like plugins and custom themes for the shell. Let's
check if you have it installed, and if you don't we will install it for you!
"
if [ -d "${HOME}/.oh-my-zsh" ]
then 
  echo "oh-my-zsh already installed..."
  echo "\nPress Enter to Continue"
  read
else
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  echo "\nPress Enter to Continue"
  read
fi

# Hide the information that appears at the top of the shell when a new session is started.
if [ -f "${HOME}/.hushlogin" ]
then
else
  cd ${HOME}
  touch .hushlogin
fi

# Install the powerlevel10k theme
echo "\nWould you like to install the powerlevel10k theme for zsh? (y/n)"
read input
if [[ $input == 'y' ]]
then
  if [ -d "${ZSH_CUSTOM}/themes/powerlevel10k"]
  then
  else
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
  fi
else
fi

# Install the z tool for ZSH
if [ -d ${ZSH_CUSTOM}/zsh-z ]
then
else
  git clone https://github.com/agkozak/zsh-z $ZSH_CUSTOM/plugins/zsh-z
fi


#################################################################################################################################
clear
printf "
#########################
# HOMEBREW INSTALLATION #
#########################

Homebrew is a package manager for Mac OS. Homebrew can download packages of code/command line tools such
as 'youtube-dl', a video downloader for youtube videos. Homebrew can also install apps from the Mac App
Store through a package called 'mas'. And lastly, Homebrew can install apps that are not from the App Store
such as Spotify!

This part of the script will take you through installing certain packages and apps to your computer automatically.
First let's check if you have Homebrew installed already...
"
if [[ -d "/usr/local/Homebrew" ]]
then echo "\nIt looks like Homebrew is already installed on your machine! Now let's install some things!

Press Enter to Continue\n"
read
clear
else
  echo "It looks like Homebrew is not installed on your machine. Let's get it installed!
  
  Press Enter to Continue\n"
  read
  clear
  # install homebrew https://brew.sh
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
#################################################################################################################################
#####################################
# INSTALLING PACKAGES WITH HOMEBREW #
#####################################

# Enter the desired packages into the PKG_LIST array below. Separate each package with a space.
# This will check if HomeBrew has already installed the package.
PKG_LIST=(mas wget python@3.9 youtube-dl node ffmpeg hub tree ripgrep bat)

printf "
#####################
# HOMEBREW PACKAGES #
#####################

I have a list of default packages that I install onto my machines within this script.
Those packages are:

  ${PKG_LIST}

I know that some users may want different packages or no packages at all so I have
provided the following options. Please enter the number of the option you would like.

(NOTE: You can also edit the package list inside the source code. Just search for PKG_LIST in
an editor and you can add or remove the packages you want and then you can come run this script
again and select option #1.)

OPTIONS:
  1. I would like to install the default list of packages provided.
  2. I would like to install the default list of packages and add some of my own.
  3. I don't want any of the default packages but I would like to add my own.
  4. I don't want to install any packages at this time.
"
read option
clear

if [[ ${option} == '1' ]]
then
  echo "\nbrew installing packages...\n"
  for PKG in ${PKG_LIST};
  do
    if [ -d "/usr/local/Cellar/${PKG}" ]
    then echo "${PKG} is already installed"
    else brew install ${PKG}
    fi
  done;
elif [[ ${option} == '2' ]]
then
  echo "\nPlease enter the names of the packages you would like Brew to install on one line like so: pkg1 pkg2 pkg3...pkgx
then press enter."
  read -A USER_LIST
  echo "\nbrew installing packages...\n"
  for PKG in ${PKG_LIST};
  do
    if [ -d "/usr/local/Cellar/${PKG}" ]
    then echo "${PKG} is already installed"
    else brew install ${PKG}
    fi
  done;

  for PKG in ${USER_LIST};
  do
    if [ -d "/usr/local/Cellar/${PKG}" ]
    then echo "${PKG} is already installed"
    else brew install ${PKG}
    fi
  done;
elif [[ ${option} == '3' ]]
then
  echo "\nPlease enter the names of the packages you would like Brew to install on one line like so: pkg1 pkg2 pkg3...pkgx
  then press enter."
  read -A USER_LIST
  for PKG in ${USER_LIST};
  do
    if [ -d "/usr/local/Cellar/${PKG}" ]
    then echo "${PKG} is already installed"
    else brew install ${PKG}
    fi
  done;
else
fi
#################################################################################################################################
#################
# NODE PACKAGES #
#################
clear
NODE_LIST=(serve fkill-cli npm-quick-run semantic-release-cli npm-check-updates yarn)
# Check the node and npm versions and print it to console
if [ -d "/usr/local/Cellar/node" ]
then 
  echo "node --version: $(node --version)"
  echo "npm --version: $(npm --version)\n"
  printf "
  #################
  # NODE PACKAGES #
  #################

  Node is another package manager just like Homebrew that contains packages that Homebrew doesn't.
  Most of these packages are used for the command-line and for more info about Node visit their
  website at https://www.npmjs.com/

  I have a list of default node packages that I install and the packages are listed below:

  ${NODE_LIST}

  I know that some users may want different packages or no packages at all so I have
  provided the following options. Please enter the number of the option you would like.

  (NOTE: You can also edit the package list inside the source code. Just search for NODE_USER_LIST in
  an editor and you can add or remove the packages you want and then you can come run this script
  again and select option #1.)

  OPTIONS:
    1. I would like to install the default list of packages provided.
    2. I would like to install the default list of packages and add some of my own.
    3. I don't want any of the default packages but I would like to add my own.
    4. I don't want to install any packages at this time.
  "
  read input
  if [[ $input == '1' ]]
  then
    for PKG in ${NODE_LIST};
    do
      if [ -d "${HOME}/.nvm/versions/node/v14.17.1/lib/node_modules/${PKG}" ]
      then echo "'${PKG}' already installed..."
      else npm install --global ${PKG}
      fi
    done;

    echo "\nAll packages were installed, press enter to continue"
    read
  elif [[ $input == '2' ]]
  then
    echo "\nPlease enter the names of the packages you would like Node to install on one line like so: pkg1 pkg2 pkg3...pkgx
then press enter."
    read -A NODE_USER_LIST
    echo "\nnode installing packages...\n"
    for PKG in ${NODE_USER_LIST};
    do
      if [ -d "${HOME}/.nvm/versions/node/v14.17.1/lib/node_modules/${PKG}" ]
      then echo "'${PKG}' already installed..."
      else npm install --global ${PKG}
      fi
    done;

    for PKG in ${NODE_LIST};
    do
      if [ -d "${HOME}/.nvm/versions/node/v14.17.1/lib/node_modules/${PKG}" ]
      then echo "'${PKG}' already installed..."
      else npm install --global ${PKG}
      fi
    done;

    echo "\nAll packages were installed, press enter to continue"
    read
  elif [[ $input == '3' ]]
  then
    echo "\nPlease enter the names of the packages you would like Node to install on one line like so: pkg1 pkg2 pkg3...pkgx
then press enter."
    read -A NODE_USER_LIST
    echo "\nnode installing packages...\n"
    for PKG in ${NODE_USER_LIST};
    do
      if [ -d "${HOME}/.nvm/versions/node/v14.17.1/lib/node_modules/${PKG}" ]
      then echo "'${PKG}' already installed..."
      else npm install --global ${PKG}
      fi
    done;

    echo "\nAll packages were installed, press enter to continue"
    read
  else
  fi
else
fi
#################################################################################################################################
###################################################
# INSTALLING APPS NOT FROM APP STORE VIA HOMEBREW #
###################################################
declare -A BREW_LIST
BREW_LIST=( [Google\ Chrome]=google-chrome 
[Spotify]=spotify 
[iTerm]=iterm2 
[Visual\ Studio\ Code]=visual-studio-code 
[Sublime\ Text]=sublime-text 
[Discord]=discord 
[Handbrake]=handbrake
[Alfred]=alfred 
[Itsycal]=itsycal 
[Dash]=dash 
[WorkFlowy]=workflowy 
[Zoom]=zoom 
[RDM]=avibrazil-rdm 
[BetterZip]=betterzip 
[Github\ Desktop]=github 
)
clear
printf "
###########################
# APPS NOT FROM APP STORE #
###########################

I have a list of default apps that I install onto my machines within this script.
Those apps are:
  
  ${(k)BREW_LIST}

I know that some users may want different apps or no apps at all so I have
provided the following options. Please enter the number of the option you would like.

(NOTE: You can also edit the app list inside the source code. Just search for BREW_LIST in
an editor and you can add or remove the apps you want and then you can come run this script
again and select option #1.)

OPTIONS:
  1. I would like to install the default list of apps provided.
  2. I would like to install the default list of apps and add some of my own.
  3. I don't want any of the default apps but I would like to add my own.
  4. I don't want to install any apps at this time.
"
read input
clear

if [[ $input == '1' ]]
then
  echo "\ninstalling apps that are not from the App Store...\n"
  for BREW_APP in ${(k)BREW_LIST}; 
  do
    if [ -d "/Applications/${BREW_APP}.app" ]
    then echo "$BREW_APP is already installed"
    elif [ -d "$HOME/Applications/${BREW_APP}.app" ]
    then echo "$BREW_APP is already installed"
    else brew install --cask ${BREW_LIST[$BREW_APP]} 
    fi
  done;
elif [[ $input == '2' ]]
then
  printf "
  In order to install your apps you must know the app's formal name on your machine
  and the app's Homebrew formula name(the name that Homebrew uses to install the app).

  For example, if I wanted to install Spotify, Spotify's formal name on my computer is 'Spotify'
  but the Homebrew name for Spotify is simply 'spotify'. Typically if the app is only one
  word then the formal name is capitalized whereas the Homebrew name is lowercase(i.e. 'Zoom' and 'zoom').
  
  If the app has more than one word then typically the Homebrew name is lowercase and the words are
  separated by a hyphen '-'. For example, 'Visual Studio Code' is the name on my computer and the
  Homebrew name is 'visual-studio-code'. Please make sure you know both names before you continue.

  Press Enter to Continue
  "
  read
  clear

  printf "
  Please enter the name of your apps that you want to download. Please enter the formal name first and then
  the Homebrew name second as such:

  FormalName=HomebrewName

  For example:
  Spotify=spotify Zoom=zoom App=app...

  Please make sure to separate each app with a space, enter all the names of the apps you would like to install
  then press enter.
  "

  declare -A USER_APPS_LIST
  IFS="=' '"
  read -A apps
  clear
  for ((i = 1; i < ${#apps[@]}; i += 2))
  do
      USER_APPS_LIST[${apps[i]}]=${apps[i + 1]}
  done;

  echo "\ninstalling apps that are not from the App Store...\n"
  for BREW_APP in ${(k)BREW_LIST}; 
  do
    if [ -d "/Applications/${BREW_APP}.app" ]
    then echo "$BREW_APP is already installed"
    elif [ -d "$HOME/Applications/${BREW_APP}.app" ]
    then echo "$BREW_APP is already installed"
    else brew install --cask ${BREW_LIST[$BREW_APP]} 
    fi
  done;

  for USER_APP in ${(k)USER_APPS_LIST}; 
  do
    if [ -d "/Applications/${USER_APP}.app" ]
    then echo "$USER_APP is already installed"
    elif [ -d "$HOME/Applications/${USER_APP}.app" ]
    then echo "$USER_APP is already installed"
    else brew install --cask ${USER_APPS_LIST[$USER_APP]} 
    fi
  done;

elif [[ $input == '3' ]]
then
  printf "
  In order to install your apps you must know the app's formal name on your machine
  and the app's Homebrew formula name(the name that Homebrew uses to install the app).

  For example, if I wanted to install Spotify, Spotify's formal name on my computer is 'Spotify'
  but the Homebrew name for Spotify is simply 'spotify'. Typically if the app is only one
  word then the formal name is capitalized whereas the Homebrew name is lowercase(i.e. 'Zoom' and 'zoom').
  
  If the app has more than one word then typically the Homebrew name is lowercase and the words are
  separated by a hyphen '-'. For example, 'Visual Studio Code' is the name on my computer and the
  Homebrew name is 'visual-studio-code'. Please make sure you know both names before you continue.

  Press Enter to Continue
  "
  read
  clear

  printf "
  Please enter the name of your apps that you want to download. Please enter the formal name first and then
  the Homebrew name second as such:

  FormalName=HomebrewName

  For example:
  Spotify=spotify Zoom=zoom App=app...

  Please make sure to separate each app with a space, enter all the names of the apps you would like to install
  then press enter.
  "
  declare -A USER_APPS_LIST
  IFS="=' '"
  read -A apps
  clear
  for ((i = 1; i < ${#apps[@]}; i += 2))
  do
      USER_APPS_LIST[${apps[i]}]=${apps[i + 1]}
  done;
  
  echo "installing apps that are not from the App Store...\n"
  for USER_APP in ${(k)USER_APPS_LIST}; 
  do
    if [ -d "/Applications/${USER_APP}.app" ]
    then echo "$USER_APP is already installed"
    elif [ -d "$HOME/Applications/${USER_APP}.app" ]
    then echo "$USER_APP is already installed."
    else brew install --cask ${USER_APPS_LIST[$USER_APP]} 
    fi
  done;
else
fi


#################################################################################################################################
##################################
# INSTALLING APPS FROM APP STORE #
##################################
clear
# Add apps and their mas id to the associative array ex. myArray=([appName]=appId or appName appID) spaces in the app name must be escaped with '\'
declare -A APP_LIST
APP_LIST=( [Microsoft\ Excel]=462058435 
[Microsoft\ OneNote]=784801555 
[Microsoft\ Outlook]=985367838 
[Microsoft\ PowerPoint]=462062816 
[Microsoft\ Remote\ Desktop]=1295203466 
[Microsoft\ Word]=462054704 
[OneDrive]=823766827 )

if [ -d "/usr/local/Cellar/mas" ]
then
  printf "
  ###########################
  # APPS FROM APP STORE #
  ###########################
  In order to install apps from the App Store we are going to use a package we just
  installed called 'mas', which stands for Mac App Store. This command line tool
  allows you to search, install, and update apps from the App Store. Each app has a
  unique mas ID that we will use to install the apps we want.

  I have a list of default apps that I install onto my machines within this script.
  Those apps are:
    
    ${(k)APP_LIST}

  I know that some users may want different apps or no apps at all so I have
  provided the following options. Make sure you are signed into iCloud and the
  App Store before continuing.

  Please enter the number of the option you would like.

  OPTIONS:
    1. I would like to install the default list of apps provided.
    2. I would like to install the default list of apps and add some of my own.
    3. I don't want any of the default apps but I would like to add my own.
    4. I don't want to install any apps at this time.

  (NOTE: You can also edit the app list inside the source code. Just search for APP_LIST in
  an editor and you can add or remove the apps you want and then you can come run this script
  again and select option #1.)
  "
  read input
  clear

  if [[ $input == '1' ]]
  then
    echo "installing apps from the App Store..."
    for APP in ${(k)APP_LIST}; 
    do
      if [ -d "/Applications/${APP}.app" ]
      then echo "$APP is already installed"
      else mas install ${APP_LIST[$APP]} 
      fi
    done;
  elif [[ $input == '2' ]]
  then
    printf "
    In order to install your apps, you need to know the name of your app and its mas ID.
    If you do not know your app's mas ID, I suggest you open a new terminal window(cmd+N)
    and enter the command 'mas search yourApp' to search for your app and it's ID.

    Please enter your app's name and mas ID just like the example below:

    OneDrive=823766827  Microsoft\ Word=462054704

    Make sure to separate each app with a space and if an app's name contains spaces please
    escape those spaces with '\'.
    "
    declare -A USER_MAS_LIST
    IFS="=' '"
    read -A apps
    clear
    for ((i = 1; i < ${#apps[@]}; i += 2))
    do
        USER_MAS_LIST[${apps[i]}]=${apps[i + 1]}
    done;

    echo "installing apps that are not from the App Store...\n"
    for MAS_APP in ${(k)USER_MAS_LIST}; 
    do
      if [ -d "/Applications/${MAS_APP}.app" ]
      then echo "$MAS_APP is already installed"
      elif [ -d "$HOME/Applications/${MAS_APP}.app" ]
      then echo "$MAS_APP is already installed."
      else brew install --cask ${USER_MAS_LIST[$MAS_APP]} 
      fi
    done;

    for APP in ${(k)APP_LIST}; 
    do
      if [ -d "/Applications/${APP}.app" ]
      then echo "$APP is already installed"
      else mas install ${APP_LIST[$APP]} 
      fi
    done;
  elif [[ $input == '3' ]]
  then
    printf "
    In order to install your apps, you need to know the name of your app and its mas ID.
    If you do not know your app's mas ID, I suggest you open a new terminal window(cmd+N)
    and enter the command 'mas search yourApp' to search for your app and it's ID.

    Please enter your app's name and mas ID just like the example below:

    OneDrive=823766827  Microsoft\ Word=462054704

    Make sure to separate each app with a space and if an app's name contains spaces please
    escape those spaces with '\'.
    "
    declare -A USER_MAS_LIST
    IFS="=' '"
    read -A apps
    clear
    for ((i = 1; i < ${#apps[@]}; i += 2))
    do
        USER_MAS_LIST[${apps[i]}]=${apps[i + 1]}
    done;

    echo "installing apps that are not from the App Store...\n"
    for MAS_APP in ${(k)USER_MAS_LIST}; 
    do
      if [ -d "/Applications/${MAS_APP}.app" ]
      then echo "$MAS_APP is already installed"
      elif [ -d "$HOME/Applications/${MAS_APP}.app" ]
      then echo "$MAS_APP is already installed."
      else brew install --cask ${USER_MAS_LIST[$MAS_APP]} 
      fi
    done;
  else
  fi
else
  echo "Cannot install any App Store apps at this time because the package 'mas' from Homebrew is not installed."
fi
#################################################################################################################################

#######################################
# GITHUB AUTHENTICATION AND FILE COPY #
#######################################
clear
printf "
###########################################
# GITHUB AUTHENTICATION AND FILE DOWNLOAD #
###########################################
GitHub Authentication:
  Would you like the script to authenticate your GitHub account for you with SSH? (y/n)

  This will allow you to push and pull commits to and from GitHub without having to
  enter your username and password each time.
"
read input
clear
if [[ ${input} == 'y' ]]
then
  echo "\nGenerating SSH key for Github authentication..."
  if [ -f "${HOME}/.ssh/config" ]
  then
    printf "
    ${HOME}/.ssh/config already exists.
    Check to see if your SSH key is already stored in ${HOME}/.ssh
    The file should be called 'id_ed25519'

    If the file exists enter 'y' if not enter 'n':
    "
    read input
    if [[ ${input} == 'y' ]]
    then
      echo "\nSince the file exists, let's configure it for SSH...\n"
      echo "Please verify that ${HOME}/.ssh/config looks exactly like this: (y/n)\n"
      echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee ~/.ssh/config
      read input
      clear
      if [[ ${input} == 'y' ]]
      then
        eval "$(ssh-agent -s)"
        ssh-add -K ~/.ssh/id_ed25519
        printf "
        Your SSH key has now been added to the key agent on your computer.
        This will now allow you to push and pull commits to and from GitHub without having to sign in each time.

        (Note: Some SSH keys are protected with a passphrase that the user sets up. If you do not remember the
        passphrase and/or do not have it stored in your computers keychain then you may need to generate a new
        SSH key.)
        
        IMPORTANT: Please look at the To-Do list that will be displayed after this script runs for important next steps.

        Press Enter to Continue
        "
        read
      else
        printf "
        Please refer to GitHub's documentation on 'SSH Keys' for more help.

        Here is the link, please look through each page about SSH Keys listed in the nav menu on the left of the page:
        https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/about-ssh

        I suggest you set up your SSH authentication manually with help from GitHub's Documentation and then come back
        and run this script and enter 'n' when prompted to set up GitHub authentication.
        "
        exit
      fi
    else
      printf "
      We are going to now generate an SSH key that will be associated with your email.

      This is an email that will be associated with your commits to GitHub, this can be
      your GitHub email(preferred) or another email.

      When generating the key, it will prompt you for a passphrase. This passphrase is to
      protect your key and this passphrase will then be stored in your computer's keychain
      so you won't need to enter it each time you try to access GitHub.

      Please enter your email:
      "
      read email
      ssh-keygen -t ed25519 -C "${email}"
      
      echo "\nPlease verify that ${HOME}/.ssh/config looks exactly like this?\n"
      echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee ~/.ssh/config
      echo "\nIf it does not look like this please copy and paste this text above and place it into the config file."
      echo '\nPress Enter to Continue'
      read
      clear

      printf "
      Your SSH key has now been added to the key agent on your computer.
      This will now allow you to push and pull commits to and from GitHub without having to sign in each time.
      
      IMPORTANT: Please look at the To-Do list that will be displayed after this script runs for important next steps.

      Press Enter to Continue
      "
      read
      fi
  else 
    printf "
    Creating ~/.ssh/config file...
    "
    touch ~/.ssh/config

    printf "
    We are going to now generate an SSH key that will be associated with your email.

    This is an email that will be associated with your commits to GitHub, this can be
    your GitHub email(preferred) or another email.

    When generating the key, it will prompt you for a passphrase. This passphrase is to
    protect your key and this passphrase will then be stored in your computer's keychain
    so you won't need to enter it each time you try to access GitHub.

    Please enter your email:
    "
    read email
    ssh-keygen -t ed25519 -C "${email}"
    echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee ~/.ssh/config
    eval "$(ssh-agent -s)"
    ssh-add -K ~/.ssh/id_ed25519
    printf "
    Your SSH key has now been added to the key agent on your computer.
    This will now allow you to push and pull commits to and from GitHub without having to sign in each time.

    (Note: Some SSH keys are protected with a passphrase that the user sets up. If you do not remember the
    passphrase and/or do not have it stored in your computers keychain then you may need to generate a new
    SSH key.)
    
    IMPORTANT: Please look at the To-Do list that will be displayed after this script runs for important next steps.

    Press Enter to Continue
    "
    read
    clear
  fi
else
fi
#################################################################################################################################
# Clones the repository containing all the dotfiles and symlinks them to the original files in the home directory.
# Now when a program refers to the hoe dotfiles they are now pointing to the custom dotfiles cloned from the repo.
clear
printf "
#####################
# DOTFILES DOWNLOAD #
#####################
  If you have other configuration files (i.e. .gitconfig, .zshrc, .gitignore_global) that you would like to download,
  this script will download them for you and make them your default configuration files.

  To download the files enter your GitHub username:
  
  Otherwise hit Enter
"
read user
if [[ $user ]]
then
  echo "Please enter the name of the repo where your files are:"
  read repo
  clear
  # Clone the repo and check if the dotfiles exist, if they exist then create symlinks to make them the default config files.
  git clone git@github.com:${user}/${repo}.git "${HOME}/dotfiles"
  if [ -f "${HOME}/dotfiles/.zshrc" ]
  then
    ln -s "${HOME}/dotfiles/.zshrc" "${HOME}/.zshrc"
  else
  fi

  if [ -f "${HOME}/dotfiles/.gitignore_global" ]
  then
    ln -s "${HOME}/dotfiles/.gitignore_global" "${HOME}/.gitignore_global"
  else
  fi

  if [ -f "${HOME}/dotfiles/.gitconfig" ]
  then
    ln -s "${HOME}/dotfiles/.gitconfig" "${HOME}/.gitconfig"
  else
  fi

  if [ -f "${HOME}/dotfiles/.my_bin" ]
  then
    ln -s "${HOME}/dotfiles/.my_bin" "${HOME}/.my_bin"
  else
  fi

  if [ -f "${HOME}/dotfiles/.vimrc" ]
  then
    ln -s "${HOME}/dotfiles/.vimrc" "${HOME}/.vimrc"
  else
  fi

  if [ -f "${HOME}/dotfiles/.vimrc-parts" ]
  then
    ln -s "${HOME}/dotfiles/.vimrc-parts" "${HOME}/.vimrc-parts"
  else
  fi

  if [ -f "${HOME}/dotfiles/.ripgreprc" ]
  then
    ln -s "${HOME}/dotfiles/.ripgreprc" "${HOME}/.ripgreprc"
  else
  fi

  printf "
  All of your configuration files were downloaded and have been set as the default
  configurations. Each file is located in the ${HOME}/dotfiles directory.

  Press Enter to Continue
  "
  read
else
fi
#################################################################################################################################

##############################################
# WELCOME TO THE SYSTEM PREFERENCES SETTINGS #
##############################################
clear
printf "
##############################################
# WELCOME TO THE SYSTEM PREFERENCES SETTINGS #
##############################################

I have curated a number of modifications to the Mac OS preferences. Some of these preferences can be adjusted
through System Preferences but there are many that are hidden unless done through the command line. This script
adjusts both and does it automatically. 

If you would like to check out the list of preferences or make adjustments of your own, look at the the code for
this script in GitHub or download it and look at it in a text editor. Each person is different so I don't expect
everyone to have the same preferences as I do, feel free to make changes.

To learn how to adjust these settings, I suggest reading this article to get started and then find similar tutorials
online:
  https://pawelgrzybek.com/change-macos-user-preferences-via-command-line/
  https://macos-defaults.com/

My preferences consist of changes to:
  * The UI
  * Finder
  * Menu Bar
  * The Dock
  * Chrome
  * Messages
  * Miscellaneous things

If you would like to continue with the preferences I have curated please hit Enter
or
enter 'q' to quit and keep all of the changes we have made so far up until this point.
"
read input
if [[ ${input} ]]
then
  clear
  exit
else
fi

# Make Chrome Two finger swipe for back and forward
# defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool TRUE

###############################################################################
# General UI/UX                                                               #
###############################################################################
# Set Date & Time to just hours:minutes format ex: "10:08"
defaults write com.apple.menuextra.clock "DateFormat" -string "\"h:mm\""

# Set standby delay to 24 hours (default is 1 hour)
sudo pmset -a standbydelay 86400

# Disable the sound effects on boot
sudo nvram SystemAudioVolume=" "

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Save to disk (not to iCloud) by default
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Automatically quit printer app once the print jobs complete
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable Resume system-wide
# defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

# Disable automatic termination of inactive apps
# defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

# Disable the crash reporter
defaults write com.apple.CrashReporter DialogType -string "none"

# Set Help Viewer windows to non-floating mode
defaults write com.apple.helpviewer DevMode -bool true

# Reveal IP address, hostname, OS version, etc. when clicking the clock
# in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Disable automatic capitalization as it’s annoying when typing code
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Disable automatic period substitution as it’s annoying when typing code
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Set login window text to custom text
sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText -string "Hello Nick..."

###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Disable “natural” (Lion-style) scrolling
defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

# Enable full keyboard access for all controls
# (e.g. enable Tab in modal dialogs)
defaults write NSGlobalDomain AppleKeyboardUIMode -int 2

# Use scroll gesture with the Ctrl (^) modifier key to zoom
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144

# Disable press-and-hold for keys in favor of key repeat
defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 10

# Show language menu in the top right corner of the boot screen
sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true

# Stop iTunes from responding to the keyboard media keys
launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null

###############################################################################
# Screen                                                                      #
###############################################################################

# Require password immediately after sleep or screen saver begins
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "${HOME}/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "jpg"

# Disable shadow in screenshots
# defaults write com.apple.screencapture disable-shadow -bool true

# Enable subpixel font rendering on non-Apple LCDs
# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
defaults write NSGlobalDomain AppleFontSmoothing -int 1

# Enable HiDPI display modes (requires restart)
sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

###############################################################################
# Finder                                                                      #
###############################################################################

# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
defaults write com.apple.finder QuitMenuItem -bool true

# Set Desktop as the default location for new Finder windows
# For other paths, use `PfLo` and `file:///full/path/here/`
defaults write com.apple.finder NewWindowTarget -string "PfDe"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

# Show icons for hard drives, servers, and removable media on the desktop
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

# Finder: show hidden files by default
defaults write com.apple.finder AppleShowAllFiles -bool true

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true

# Finder: show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Finder: path bar delay is set to '0'
defaults write NSGlobalDomain "NSToolbarTitleViewRolloverDelay" -float "0"

# Set sidebar icon size to 1. Default is 2.
defaults write NSGlobalDomain "NSTableViewDefaultSizeMode" -int "1"

# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Keep folders on top when sorting by name
defaults write com.apple.finder _FXSortFoldersFirst -bool true

# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Enable spring loading for directories
defaults write NSGlobalDomain com.apple.springing.enabled -bool true

# Reduce the spring loading delay for directories
defaults write NSGlobalDomain com.apple.springing.delay -float 0.2

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Disable disk image verification
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

# Enable snap-to-grid for icons on the desktop and in other icon views
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

# Use column view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`, `Nlsv`
defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

# Disable the warning before emptying the Trash
defaults write com.apple.finder WarnOnEmptyTrash -bool false

# Enable AirDrop over Ethernet and on unsupported Macs running Lion
defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

# Show the ~/Library folder
chflags nohidden ~/Library

# Show the /Volumes folder
sudo chflags nohidden /Volumes

# Expand the following File Info panes:
# “General”, “Open with”, and “Sharing & Permissions”
defaults write com.apple.finder FXInfoPanesExpanded -dict \
  General -bool true \
  OpenWith -bool true \
  Privileges -bool true

###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################
# Don't show recently opened apps on the Dock
defaults write com.apple.dock "show-recents" -bool "false"

# Change the minimize effect for windows to scale
defaults write com.apple.dock "mineffect" -string "scale"

# Set the icon size of Dock items to 44 pixels
defaults write com.apple.dock tilesize -int 44

# Change minimize/maximize window effect
defaults write com.apple.dock mineffect -string "scale"

# Minimize windows into their application’s icon
defaults write com.apple.dock minimize-to-application -bool true

# Enable spring loading for all Dock items
defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

# Show indicator lights for open applications in the Dock
defaults write com.apple.dock show-process-indicators -bool true

# Wipe all (default) app icons from the Dock
# This is only really useful when setting up a new Mac, or if you don’t use
# the Dock to launch apps.
defaults write com.apple.dock persistent-apps -array

# Speed up Mission Control animations
defaults write com.apple.dock expose-animation-duration -float 0.1

# Hot corners
# Possible values:
#  0: no-op
#  2: Mission Control
#  3: Show application windows
#  4: Desktop
#  5: Start screen saver
#  6: Disable screen saver
#  7: Dashboard
# 10: Put display to sleep
# 11: Launchpad
# 12: Notification Center
# 1048576 is ⌘ I think
# Top left screen corner → Desktop
defaults write com.apple.dock wvous-tl-corner -int 13
defaults write com.apple.dock wvous-tl-modifier -int 1048576
# Top right screen corner → Desktop
defaults write com.apple.dock wvous-tr-corner -int 2
defaults write com.apple.dock wvous-tr-modifier -int 1048576
# Bottom left screen corner → Start screen saver
defaults write com.apple.dock wvous-bl-corner -int 4
defaults write com.apple.dock wvous-bl-modifier -int 1048576
# Bottom right screen corner → Put display to sleep
defaults write com.apple.dock wvous-br-corner -int 0
defaults write com.apple.dock wvous-br-modifier -int 1048576

###############################################################################
# Safari & WebKit                                                             #
###############################################################################

# # Privacy: don’t send search queries to Apple
# defaults write com.apple.Safari UniversalSearchEnabled -bool false
# defaults write com.apple.Safari SuppressSearchSuggestions -bool true

# # Press Tab to highlight each item on a web page
# defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

# # Show the full URL in the address bar (note: this still hides the scheme)
# defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true

# # Set Safari’s home page to `about:blank` for faster loading
# defaults write com.apple.Safari HomePage -string "about:blank"

# # Prevent Safari from opening ‘safe’ files automatically after downloading
# defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

# # Allow hitting the Backspace key to go to the previous page in history
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

# # Hide Safari’s bookmarks bar by default
# defaults write com.apple.Safari ShowFavoritesBar -bool false

# # Hide Safari’s sidebar in Top Sites
# defaults write com.apple.Safari ShowSidebarInTopSites -bool false

# # Disable Safari’s thumbnail cache for History and Top Sites
# defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

# # Enable Safari’s debug menu
# defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

# # Make Safari’s search banners default to Contains instead of Starts With
# defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

# # Remove useless icons from Safari’s bookmarks bar
# defaults write com.apple.Safari ProxiesInBookmarksBar "()"

# # Enable the Develop menu and the Web Inspector in Safari
# defaults write com.apple.Safari IncludeDevelopMenu -bool true
# defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

# # Add a context menu item for showing the Web Inspector in web views
# defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

# # Enable continuous spellchecking
# defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true
# # Disable auto-correct
# defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false

# # Disable AutoFill
# defaults write com.apple.Safari AutoFillFromAddressBook -bool false
# defaults write com.apple.Safari AutoFillPasswords -bool false
# defaults write com.apple.Safari AutoFillCreditCardData -bool false
# defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false

# # Warn about fraudulent websites
# defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true

# # Disable plug-ins
# defaults write com.apple.Safari WebKitPluginsEnabled -bool false
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false

# # Disable Java
# defaults write com.apple.Safari WebKitJavaEnabled -bool false
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false

# # Block pop-up windows
# defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false

# # Disable auto-playing video
# defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false
# defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false
# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false
# defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false

# # Enable “Do Not Track”
# defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true

# # Update extensions automatically
# defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true

###############################################################################
# Mail                                                                        #
###############################################################################

# Disable send and reply animations in Mail.app
# defaults write com.apple.mail DisableReplyAnimations -bool true
# defaults write com.apple.mail DisableSendAnimations -bool true

# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

# Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" "@\U21a9"

# Display emails in threaded mode, sorted by date (oldest at the top)
defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"

###############################################################################
# Spotlight                                                                   #
###############################################################################

# Hide Spotlight tray-icon (and subsequent helper)
sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search

# Change indexing order and disable some search results
# Yosemite-specific search results (remove them if you are using macOS 10.9 or older):
#   MENU_DEFINITION
#   MENU_CONVERSION
#   MENU_EXPRESSION
#   MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
#   MENU_WEBSEARCH             (send search queries to Apple)
#   MENU_OTHER
# defaults write com.apple.spotlight orderedItems -array \
#   '{"enabled" = 1;"name" = "APPLICATIONS";}' \
#   '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
#   '{"enabled" = 1;"name" = "DIRECTORIES";}' \
#   '{"enabled" = 1;"name" = "PDF";}' \
#   '{"enabled" = 1;"name" = "FONTS";}' \
#   '{"enabled" = 0;"name" = "DOCUMENTS";}' \
#   '{"enabled" = 0;"name" = "MESSAGES";}' \
#   '{"enabled" = 0;"name" = "CONTACT";}' \
#   '{"enabled" = 0;"name" = "EVENT_TODO";}' \
#   '{"enabled" = 0;"name" = "IMAGES";}' \
#   '{"enabled" = 0;"name" = "BOOKMARKS";}' \
#   '{"enabled" = 0;"name" = "MUSIC";}' \
#   '{"enabled" = 0;"name" = "MOVIES";}' \
#   '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
#   '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
#   '{"enabled" = 0;"name" = "SOURCE";}' \
#   '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
#   '{"enabled" = 0;"name" = "MENU_OTHER";}' \
#   '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
#   '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
#   '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
#   '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'

# # Load new settings before rebuilding the index
# killall mds > /dev/null 2>&1
# # Make sure indexing is enabled for the main volume
# sudo mdutil -i on / > /dev/null
# # Rebuild the index from scratch
# sudo mdutil -E / > /dev/null

###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################

# Only use UTF-8 in Terminal.app
defaults write com.apple.terminal StringEncodings -array 4

# Disable the annoying line marks
defaults write com.apple.Terminal ShowLineMarks -int 0

# Don’t display the annoying prompt when quitting iTerm
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

###############################################################################
# Time Machine                                                                #
###############################################################################

# Prevent Time Machine from prompting to use new hard drives as backup volume
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

###############################################################################
# Activity Monitor                                                            #
###############################################################################

# # Show the main window when launching Activity Monitor
# defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

# # Visualize CPU usage in the Activity Monitor Dock icon
# # defaults write com.apple.ActivityMonitor IconType -int 5

# # Show all processes in Activity Monitor
# defaults write com.apple.ActivityMonitor ShowCategory -int 0

# # Sort Activity Monitor results by CPU usage
# defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
# defaults write com.apple.ActivityMonitor SortDirection -int 0

###############################################################################
# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #
###############################################################################

# Use plain text mode for new TextEdit documents
defaults write com.apple.TextEdit RichText -int 0

# Open and save files as UTF-8 in TextEdit
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

# Auto-play videos when opened with QuickTime Player
defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the WebKit Developer Tools in the Mac App Store
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Turn on app auto-update
defaults write com.apple.commerce AutoUpdate -bool true

# Disallow the App Store to reboot machine on macOS updates
defaults write com.apple.commerce AutoUpdateRestartRequired -bool false

###############################################################################
# Photos                                                                      #
###############################################################################

# Prevent Photos from opening automatically when devices are plugged in
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

###############################################################################
# Messages                                                                    #
###############################################################################

# Disable automatic emoji substitution (i.e. use plain text smileys)
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false

# Disable smart quotes as it’s annoying for messages that contain code
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

# Disable continuous spell checking
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false

###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################

# Disable the all too sensitive backswipe on trackpads
defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false

# Disable the all too sensitive backswipe on Magic Mouse
defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false

# Expand the print dialog by default
defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true

###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" \
  "Address Book" \
  "Calendar" \
  "cfprefsd" \
  "Contacts" \
  "Dock" \
  "Finder" \
  "Mail" \
  "Messages" \
  "Photos" \
  "Safari" \
  "SystemUIServer" \
  "iCal"; do
  killall "${app}" &> /dev/null
done

printf "
##############
# TO DO LIST #
##############

Congratulations $(whoami), your computer is now all set up!
Thank you for using this .macos script! If you liked it please
share it with others!

Things to do:
  * Restart your computer to make sure that all the changes take effect
  * Login to literally everything!
  * Customize your Dock
  * If you downloaded files from GitHub during this script,
    please go check ${HOME}/dotfiles to make sure they are all
    there.
  * Login to VS Code to sync your settings
  * Configure iTerm2 (Add the profile included in this repo)

Have a great day!

INFORMATION:

This script was modified by Nick J. Moss (https://github.com/nickjmoss) and was 
downloaded from Kent C. Dodds' (https://github.com/kentcdodds) dotfiles repository.
The original author of this script is Mathias Bynens (https://mths.be/macos).
"
